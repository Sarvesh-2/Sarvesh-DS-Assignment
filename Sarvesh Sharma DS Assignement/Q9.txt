9. For a given k value (k>0) reverse blocks of nodes in the list.
 Example: Input: 1,2,3,4,5,6,7,8,9,10 
 Output for different k values: For k=2: 2,1,4,3,6,5,8,7,10,9
 For k=3: 3,2,1,6,5,4,9,8,7,10 For k=4: 4,3,2,1,8,7,6,5,9,10.

Leetcode solution link:-

https://leetcode.com/problems/reverse-nodes-in-k-group/submissions/901727920/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool length(ListNode* head, int k)
    {
        while(k and head)
        {
            head = head->next;
            k--;
        }
        return k==0;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *curr = head, *next = NULL, *prev = NULL;
        int count=0;
        
        if(k==1) return curr;
        if(!length(head, k)) return curr;

        while( curr != NULL && count < k){
            next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = next;
            count++;
        }
        if(next != NULL){
            ListNode *rest_head = reverseKGroup(next, k);
            head->next =  rest_head;
        }
        return prev;
    }
};