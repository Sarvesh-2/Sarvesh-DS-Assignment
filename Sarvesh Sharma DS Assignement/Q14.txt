//#Leetcode Solutin for Q14
//14. Show how to implement one queue efficiently using two stacks. Analyse the running 
//time of queue operations.


class MyQueue {
public:
    stack<int> st1;
    stack<int> st2;
    int size;
    MyQueue() {
        size=100;

    }
    
    void push(int x) {
        if(st1.size()==size)
            return;    
        st1.push(x);
        return;
    }
    
    int pop() {
        if(st1.empty()) return -1;
        while(!st1.empty()){
            st2.push(st1.top());
            st1.pop();
        }
        int temp=st2.top();
        st2.pop();
        while(!st2.empty()){
            st1.push(st2.top());
            st2.pop();
        }
        return temp;
    }
    
    int peek() {
        if(st1.empty()) return -1;
        while(!st1.empty()){
            st2.push(st1.top());
            st1.pop();
        } 
        int temp=st2.top();
        while(!st2.empty()){
            st1.push(st2.top());
            st2.pop();
        }
        return temp;
    }
    
    bool empty() {
        if(st1.empty())
            return 1;
        else
            return 0;
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
